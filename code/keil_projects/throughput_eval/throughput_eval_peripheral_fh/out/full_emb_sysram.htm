<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\full_emb_sysram.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\full_emb_sysram.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Mon Mar 19 15:02:18 2018
<BR><P>
<H3>Maximum Stack Usage =        296 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
spotar_patch_data_ind_handler &rArr; app_spotar_img_hdlr &rArr; app_read_image_headers &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">KEYBRD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">KEYBRD_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[11]">BLE_CRYPT_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[9]">BLE_CSCNT_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[b]">BLE_ERROR_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[d]">BLE_EVENT_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[7]">BLE_FINETGTIM_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[8]">BLE_GROSSTGTIM_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[10]">BLE_RF_DIAG_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[c]">BLE_RX_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[a]">BLE_SLP_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from rwble.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[4b]">DCoffsetCalibration_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3b]">GPADC_init_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[19]">GPIO0_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1a]">GPIO1_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1b]">GPIO2_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1c]">GPIO3_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1d]">GPIO4_Handler</a> from gpio.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[57]">HardFault_HandlerC</a> from hardfault_handler.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[14]">I2C_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[4c]">IffCalibration_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[17]">KEYBRD_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[56]">NMI_HandlerC</a> from nmi_handler.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[4]">PendSV_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[5e]">RADIOCNTL_Handler</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[18]">RFCAL_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[15]">SPI_Handler</a> from rom_symdef.txt(ABSOLUTE) referenced from boot_vectors.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[58]">SVC_Handler_c</a> from arch_main.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[e]">SWTIM_Handler</a> from pwm.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_armcm0.o(.text) referenced from boot_vectors.o(.text)
 <LI><a href="#[13]">UART2_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[12]">UART_Handler</a> from uart.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[27]">UART_Handler_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[f]">WKUP_QUADEC_Handler</a> from boot_vectors.o(.text) referenced from boot_vectors.o(RESET)
 <LI><a href="#[55]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from boot_vectors.o(.text)
 <LI><a href="#[80]">adc_timer_handle</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[7d]">app_module_init_cmp_evt_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[3d]">check_pll_lock_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[42]">clear_HW_LUT_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[62]">cmp_abs_time</a> from arch_main.o(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[32]">custom_nvds_get_func</a> from nvds.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[89]">diss_create_db_cfm_handler</a> from app_dis_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[74]">diss_create_db_req_handler</a> from diss_task.o(.text) referenced from diss_task.o(.constdata)
 <LI><a href="#[8a]">diss_disable_ind_handler</a> from app_dis_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[76]">diss_enable_req_handler</a> from diss_task.o(.text) referenced from diss_task.o(.constdata)
 <LI><a href="#[75]">diss_set_char_val_req_handler</a> from diss_task.o(.text) referenced from diss_task.o(.constdata)
 <LI><a href="#[36]">enable_BLE_core_irq_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[49]">enable_rf_diag_irq_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[46]">find_initial_calcap_ranges_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[86]">gapc_bond_ind_handler</a> from app_sec_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[85]">gapc_bond_req_ind_handler</a> from app_sec_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[7a]">gapc_cmp_evt_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[7b]">gapc_connection_req_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[73]">gapc_disconnect_ind_handler</a> from spotar_task.o(.text) referenced 3 times from spotar_task.o(.constdata)
 <LI><a href="#[88]">gapc_encrypt_ind_handler</a> from app_sec_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[87]">gapc_encrypt_req_ind_handler</a> from app_sec_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[7e]">gapm_adv_report_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[79]">gapm_cmp_evt_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[78]">gapm_device_ready_ind_handler</a> from app_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6d]">gattc_write_cmd_ind_handler</a> from streamdatad_task.o(.text) referenced 2 times from streamdatad_task.o(.constdata)
 <LI><a href="#[4e]">get_rc16m_count_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2e]">gtl_eif_init_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[38]">gtl_hci_rx_header_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[39]">gtl_hci_rx_payload_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3a]">gtl_hci_tx_evt_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2f]">ke_task_init_func</a> from ke_task.obj(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[61]">ke_task_schedule</a> from ke_task.obj(.text) referenced from ke_task.obj(.text)
 <LI><a href="#[30]">ke_timer_init_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[84]">key_dispose_handle</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[83]">key_scan_handle</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[63]">l2cc_pdu_recv_ind_handler</a> from atts_task.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[2d]">lld_evt_init_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[35]">lld_init_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[28]">lld_sleep_compensate_func_patched</a> from rwble.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[29]">lld_sleep_init_func</a> from arch_main.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2b]">lld_sleep_lpcycles_2_us_sel_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[2a]">lld_sleep_us_2_lpcycles_sel_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[52]">lld_test_mode_rx_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[51]">lld_test_mode_tx_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[50]">lld_test_stop_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[31]">llm_encryption_done_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[53]">main</a> from rom_symdef.txt(ABSOLUTE) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1e]">main_func</a> from arch_main.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3c]">meas_precharge_freq_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4a]">modulationGainCalibration_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[81]">motor_handle</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[82]">motor_reset_handle</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[68]">my_llc_ch_map_req_ind</a> from ch_map.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[67]">my_llc_con_update_req_ind</a> from ch_map.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[91]">my_timer_handler</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[69]">patched_gapm_adv_op_sanity</a> from gapm_util.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[37]">platform_reset_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[47]">pll_vcocal_LUT_InitUpdate_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[34]">prf_cleanup_func</a> from prf_utils.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[20]">prf_init_func</a> from prf_utils.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4d]">rf_calibration_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[5f]">rf_force_agc_enable</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[1f]">rf_init_func</a> from rf_580.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[59]">rf_reg_rd</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[5a]">rf_reg_wr</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[2c]">rf_reinit_func</a> from rf_580.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[5d]">rf_reset</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[60]">rf_rssi_convert</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[5c]">rf_sleep</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[5b]">rf_txpwr_dbm_get</a> from rf_580.o(.text) referenced from rf_580.o(.text)
 <LI><a href="#[33]">rwip_eif_get_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[44]">save_configure_restore_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[4f]">set_gauss_modgain_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[48]">set_rf_cal_cap_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[65]">smpc_check_pairing_feat</a> from smpc.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[66]">smpc_pairing_cfm_handler</a> from smpc_task.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[64]">smpc_send_pairing_req_ind</a> from smpc.obj(.text) referenced from arch_main.o(.constdata)
 <LI><a href="#[8f]">spotar_create_db_cfm_handler</a> from app_spotar_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6e]">spotar_create_db_req_handler</a> from spotar_task.o(.text) referenced from spotar_task.o(.constdata)
 <LI><a href="#[6f]">spotar_enable_req_handler</a> from spotar_task.o(.text) referenced from spotar_task.o(.constdata)
 <LI><a href="#[8c]">spotar_gpio_map_ind_handler</a> from app_spotar_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[71]">spotar_mem_info_update_req_handler</a> from spotar_task.o(.text) referenced from spotar_task.o(.constdata)
 <LI><a href="#[8e]">spotar_patch_data_ind_handler</a> from app_spotar_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[8d]">spotar_patch_len_ind_handler</a> from app_spotar_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[8b]">spotar_patch_mem_dev_ind_handler</a> from app_spotar_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[72]">spotar_status_update_req_handler</a> from spotar_task.o(.text) referenced from spotar_task.o(.constdata)
 <LI><a href="#[90]">stream_create_db_cfm_handler</a> from app_streamdatad_task.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[6a]">streamdatad_create_db_req_handler</a> from streamdatad_task.o(.text) referenced from streamdatad_task.o(.constdata)
 <LI><a href="#[6c]">streamdatad_disable_req_handler</a> from streamdatad_task.o(.text) referenced from streamdatad_task.o(.constdata)
 <LI><a href="#[6b]">streamdatad_enable_req_handler</a> from streamdatad_task.o(.text) referenced from streamdatad_task.o(.constdata)
 <LI><a href="#[24]">uart_finish_transfers_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[23]">uart_flow_off_func</a> from arch_system.o(.text) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[22]">uart_flow_on_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[7f]">uart_handle</a> from app_throughput_peripheral_proj.o(.text) referenced from app_task.o(.constdata)
 <LI><a href="#[21]">uart_init_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[25]">uart_read_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[26]">uart_write_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[43]">update_LUT_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3f]">update_calcap_max_channel_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[3e]">update_calcap_min_channel_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[45]">update_calcap_ranges_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[41]">write_HW_LUT_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
 <LI><a href="#[40]">write_one_SW_LUT_entry_func</a> from rom_symdef.txt(ABSOLUTE) referenced from jump_table.o(jump_table_mem_area)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1b7]"></a>exec_patching_spota</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_exec_patch (via Veneer)
</UL>

<P><STRONG><a name="[1a7]"></a>get_patching_spota_length</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_exec_patch (via Veneer)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem (via Veneer)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr (via Veneer)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_gpio_map_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[16]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>set_system_clocks</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>rf_workaround_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[1ac]"></a>platform_reset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem (via Veneer)
</UL>

<P><STRONG><a name="[37]"></a>platform_reset_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[33]"></a>rwip_eif_get_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b2]"></a>app_get_sleep_mode</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_force_active_mode (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[11b]"></a>co_list_push_back</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[118]"></a>co_list_pop_front</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[121]"></a>llc_util_dicon_procedure</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>enable_BLE_core_irq_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[35]"></a>lld_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[122]"></a>lld_ch_map_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[11f]"></a>lld_con_update_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>lld_test_stop_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[51]"></a>lld_test_mode_tx_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[52]"></a>lld_test_mode_rx_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[2d]"></a>lld_evt_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[14d]"></a>lld_evt_start_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CSCNT_Handler (via Veneer)
</UL>

<P><STRONG><a name="[154]"></a>lld_evt_end_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_EVENT_Handler (via Veneer)
</UL>

<P><STRONG><a name="[153]"></a>lld_evt_rx_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RX_Handler (via Veneer)
</UL>

<P><STRONG><a name="[f1]"></a>lld_sleep_us_2_lpcycles_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_sel_func (via Veneer)
</UL>

<P><STRONG><a name="[f3]"></a>lld_sleep_lpcycles_2_us_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_sel_func (via Veneer)
</UL>

<P><STRONG><a name="[14a]"></a>lld_sleep_enter</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[b6]"></a>lld_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[31]"></a>llm_encryption_done_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[21]"></a>uart_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[f4]"></a>uart_flow_on</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off_func (via Veneer)
</UL>

<P><STRONG><a name="[22]"></a>uart_flow_on_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[24]"></a>uart_finish_transfers_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[25]"></a>uart_read_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[26]"></a>uart_write_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[27]"></a>UART_Handler_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3b]"></a>GPADC_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3c]"></a>meas_precharge_freq_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3d]"></a>check_pll_lock_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3e]"></a>update_calcap_min_channel_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3f]"></a>update_calcap_max_channel_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[40]"></a>write_one_SW_LUT_entry_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[41]"></a>write_HW_LUT_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[42]"></a>clear_HW_LUT_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[43]"></a>update_LUT_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[44]"></a>save_configure_restore_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[45]"></a>update_calcap_ranges_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[46]"></a>find_initial_calcap_ranges_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[ee]"></a>pll_vcocal_LUT_InitUpdate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals (via Veneer)
</UL>

<P><STRONG><a name="[47]"></a>pll_vcocal_LUT_InitUpdate_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[155]"></a>set_rf_cal_cap</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RF_DIAG_Handler (via Veneer)
</UL>

<P><STRONG><a name="[48]"></a>set_rf_cal_cap_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[4a]"></a>modulationGainCalibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[4b]"></a>DCoffsetCalibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[4c]"></a>IffCalibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[ef]"></a>rf_calibration</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals (via Veneer)
</UL>

<P><STRONG><a name="[4d]"></a>rf_calibration_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[ed]"></a>get_rc16m_count</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals (via Veneer)
</UL>

<P><STRONG><a name="[ec]"></a>$Super$$get_rc16m_count_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count_func (via Veneer)
</UL>

<P><STRONG><a name="[156]"></a>set_gauss_modgain</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_RF_DIAG_Handler (via Veneer)
</UL>

<P><STRONG><a name="[4f]"></a>set_gauss_modgain_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b1]"></a>enable_rf_diag_irq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reinit_func (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[49]"></a>enable_rf_diag_irq_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[148]"></a>gtl_enter_sleep</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[38]"></a>gtl_hci_rx_header_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[39]"></a>gtl_hci_rx_payload_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[3a]"></a>gtl_hci_tx_evt_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[14f]"></a>gtl_eif_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[2e]"></a>gtl_eif_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[164]"></a>attmdb_add_service</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[165]"></a>attmdb_add_attribute</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[162]"></a>attmdb_att_update_value</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[c6]"></a>attmdb_att_set_value</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_enable_req_handler (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio0_int_callback (via Veneer)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_char_val_req_handler (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_enable_req_handler (via Veneer)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_mem_info_update_req_handler (via Veneer)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_status_update_req_handler (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[166]"></a>attmdb_att_get_value</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_status_update_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[160]"></a>attmdb_svc_set_permission</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_enable_req_handler (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_create_db_req_handler (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_disable (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_enable_req_handler (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_disable (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_enable_req_handler (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[15f]"></a>attm_svc_create_db</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_create_db_req_handler (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[127]"></a>atts_mtu_exc_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[128]"></a>atts_find_info_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[129]"></a>atts_find_by_type_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[12a]"></a>atts_read_by_type_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[12b]"></a>atts_read_by_grp_type_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>atts_read_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[12d]"></a>atts_read_blob_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>atts_read_mult_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[12f]"></a>atts_write_no_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[130]"></a>atts_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[131]"></a>atts_signed_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>atts_prepare_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[133]"></a>atts_execute_write_resp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[126]"></a>atts_send_cmd_cmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[163]"></a>atts_write_rsp_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[13d]"></a>smpc_check_max_key_size</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[13e]"></a>smpc_check_key_distrib</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[138]"></a>smpc_generate_rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[13c]"></a>smpc_pairing_end</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[13b]"></a>smpc_tkdp_rcp_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[13a]"></a>smpc_pdu_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[139]"></a>smpc_tkdp_send_continue</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[13f]"></a>smpc_get_key_sec_prop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[140]"></a>smpc_is_sec_mode_reached</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[15c]"></a>gapc_send_disconect_ind</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup_func (via Veneer)
</UL>

<P><STRONG><a name="[161]"></a>gapc_get_conidx</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_enable_req_handler (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_enable_req_handler (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_enable_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[158]"></a>gapc_get_conhdl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patched_data_rcved (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[136]"></a>gapc_get_role</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[135]"></a>gapc_get_enc_keysize</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
</UL>

<P><STRONG><a name="[141]"></a>gapm_get_privacy_flag</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patched_gapm_adv_op_sanity (via Veneer)
</UL>

<P><STRONG><a name="[143]"></a>gapm_set_recon_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patched_gapm_adv_op_sanity (via Veneer)
</UL>

<P><STRONG><a name="[146]"></a>ke_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[11e]"></a>ke_event_callback_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init_func (via Veneer)
</UL>

<P><STRONG><a name="[11c]"></a>ke_event_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[b4]"></a>ke_event_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[bb]"></a>ke_mem_is_empty</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[134]"></a>ke_msg_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_send_event (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_create_db_req_handler (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_mem_info_update_req (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_streamdatad_enable (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stream_create_db (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_enable (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_create_db (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_enable_prf (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_create_db_send (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_create_db_cfm_handler (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_cfm_handler (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_cfm_handler (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_device_ready_ind_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_security_start (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_stop (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_confirm (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_disable (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patched_data_rcved (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_disable (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>ke_msg_send</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind (via Veneer)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_send_event (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_create_db_req_handler (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req (via Veneer)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_mem_info_update_req (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_streamdatad_enable (via Veneer)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stream_create_db (via Veneer)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_enable (via Veneer)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_create_db (via Veneer)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_enable_prf (via Veneer)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_create_db_send (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_create_db_cfm_handler (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_cfm_handler (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_cfm_handler (via Veneer)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_device_ready_ind_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_security_start (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect (via Veneer)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_stop (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start (via Veneer)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_confirm (via Veneer)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_disable (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler (via Veneer)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patched_data_rcved (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_disable (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[11a]"></a>ke_msg_free</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[15e]"></a>ke_task_create</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_init (via Veneer)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_init (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init (via Veneer)
</UL>

<P><STRONG><a name="[120]"></a>ke_state_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_disable_req_handler (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_enable_req_handler (via Veneer)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_create_db_req_handler (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_init (via Veneer)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_init (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_func (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect_func (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_security_start (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start (via Veneer)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_disable (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_enable_req_handler (via Veneer)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_disable (via Veneer)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_enable_req_handler (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_req_handler (via Veneer)
</UL>

<P><STRONG><a name="[123]"></a>ke_state_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup_func (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ext_stats_report_send (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_create_db_cfm_handler (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_create_db_cfm_handler (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_cfm_handler (via Veneer)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect_func (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_module_init_cmp_evt_handler (via Veneer)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler (via Veneer)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_device_ready_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[119]"></a>ke_task_handler_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_schedule (via Veneer)
</UL>

<P><STRONG><a name="[30]"></a>ke_timer_init_func</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[172]"></a>ke_timer_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>ke_timer_clear</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_timer_handler (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle (via Veneer)
</UL>

<P><STRONG><a name="[147]"></a>ke_timer_sleep_check</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[16c]"></a>nvds_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_func (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>nvds_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[14b]"></a>ble_regs_push</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
</UL>

<P><STRONG><a name="[14e]"></a>ble_regs_pop</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[152]"></a>rf_reinit</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[ac]"></a>rwip_init</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[b3]"></a>rwip_prevent_sleep_get</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[b5]"></a>rwip_schedule</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[150]"></a>rwip_wakeup</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler (via Veneer)
</UL>

<P><STRONG><a name="[eb]"></a>rwip_wakeup_delay_set</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_delay (via Veneer)
</UL>

<P><STRONG><a name="[7]"></a>BLE_FINETGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BLE_GROSSTGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[14c]"></a>$Super$$BLE_CSCNT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_CSCNT_Handler (via Veneer)
</UL>

<P><STRONG><a name="[b]"></a>BLE_ERROR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BLE_CRYPT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>func_check_mem</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[ba]"></a>test_rxdone</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate_func_patched (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq (via Veneer)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_con_update_req_ind (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_fill (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_rcx_func (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle (via Veneer)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle (via Veneer)
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_idivmod</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fliter (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_gen_tk (via Veneer)
</UL>

<P><STRONG><a name="[17c]"></a>rand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_gen_ltk (via Veneer)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_gen_tk (via Veneer)
</UL>

<P><STRONG><a name="[a7]"></a>srand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_nvds_get_func (via Veneer)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler (via Veneer)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read_bdaddr_from_otp (via Veneer)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_llc_ch_map_req_ind (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_data_ind_handler (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_cfm_handler (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_func (via Veneer)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect (via Veneer)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_func (via Veneer)
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_memset</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers (via Veneer)
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init (via Veneer)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_init (via Veneer)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_init (via Veneer)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init (via Veneer)
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_init_func (via Veneer)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[144]"></a>memcmp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_nvds_get_func (via Veneer)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers (via Veneer)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq (via Veneer)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle (via Veneer)
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle (via Veneer)
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle (via Veneer)
</UL>

<P><STRONG><a name="[1bd]"></a>_double_round</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via Veneer)
</UL>

<P><STRONG><a name="[1bc]"></a>_double_epilogue</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via Veneer)
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive (via Veneer)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinStatus (via Veneer)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction (via Veneer)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ (via Veneer)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_i2c_config (via Veneer)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_spi_config (via Veneer)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via Veneer)
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via Veneer)
</UL>

<P><STRONG><a name="[124]"></a>__ARM_common_switch8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rom_symdef.txt(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l2cc_pdu_recv_ind_handler (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_sanity (via Veneer)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[94]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c1]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_armcm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYBRD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WKUP_QUADEC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>HardFault_HandlerC</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hardfault_handler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>SVC_Handler_c</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>patch_func</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[29]"></a>lld_sleep_init_func</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_sleep_init_func &rArr; set_sleep_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sleep_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[97]"></a>KeyScan</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyScan &rArr; GPIO_GetPinStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
</UL>

<P><STRONG><a name="[99]"></a>KeyDispose</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyDispose &rArr; ZigBee_Wake &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Wake
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[c4]"></a>BCC_verify</STRONG> (Thumb, 32 bytes, Stack size 28 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BCC_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[1e]"></a>main_func</STRONG> (Thumb, 2608 bytes, Stack size 88 bytes, arch_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main_func &rArr; periph_init &rArr; spi_flash_auto_detect &rArr; spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_rxdone (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand (via Veneer)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_system_clocks (via Veneer)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_schedule (via Veneer)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_get (via Veneer)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_init (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_send_event
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_read_bdaddr_from_otp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_init (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_check (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_is_empty (via Veneer)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_get (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iq_trim_from_otp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pwr_and_clk_ble
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_check_mem (via Veneer)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rf_diag_irq (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conditionally_run_radio_cals
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_rcx20
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_sleep_mode (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disable_sleep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via Veneer)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Wake
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Sleep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Setting
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinStatus
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCC_verify
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init_func
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[92]"></a>dummyf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, jump_table.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[ad]"></a>app_disable_sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_force_active_mode
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[ca]"></a>app_set_extended_sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_restore_sleep_mode
</UL>

<P><STRONG><a name="[c9]"></a>app_set_deep_sleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_restore_sleep_mode
</UL>

<P><STRONG><a name="[c8]"></a>app_restore_sleep_mode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_deep_sleep
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_extended_sleep
</UL>

<P><STRONG><a name="[cb]"></a>app_force_active_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, arch_sleep.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_sleep_mode (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disable_sleep
</UL>

<P><STRONG><a name="[1ca]"></a>app_ble_ext_wakeup_on</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>app_ble_ext_wakeup_off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>app_ble_ext_wakeup_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_sleep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[1cc]"></a>app_ble_force_wakeup</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>app_last_rwble_evt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, arch_sleep.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>NMI_HandlerC</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, nmi_handler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>timer_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_init &rArr; timer2_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_sw_pause
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_pwm2_duty_cycle
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_start
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_enable_irq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tmr_enable
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tmr_div
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[1ce]"></a>timer_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, periph_setup.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, periph_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Wake
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
</UL>

<P><STRONG><a name="[e4]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, periph_setup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Setting
</UL>

<P><STRONG><a name="[1c3]"></a>GPIO_reservations</STRONG> (Thumb, 686 bytes, Stack size 16 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_reservations
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[d6]"></a>set_pad_functions</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = set_pad_functions &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[d7]"></a>gpio0_int_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, periph_setup.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup_func
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_send_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
</UL>

<P><STRONG><a name="[1cf]"></a>gpio1_int_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, periph_setup.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>periph_init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = periph_init &rArr; spi_flash_auto_detect &rArr; spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_func
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_auto_detect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_functions
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WAKEUP_LP_Handler
</UL>

<P><STRONG><a name="[9d]"></a>SetBeep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetBeep &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
</UL>

<P><STRONG><a name="[e3]"></a>fliter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fliter
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[be]"></a>beep</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beep &rArr; SetBeep &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[a6]"></a>ZigBee_Sleep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ZigBee_Sleep &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[9f]"></a>ZigBee_Wake</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ZigBee_Wake &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
</UL>

<P><STRONG><a name="[bc]"></a>ZigBee_Setting</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, periph_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ZigBee_Setting
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[1d0]"></a>select_lp_clk</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>init_pwr_and_clk_ble</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_pwr_and_clk_ble
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[1d1]"></a>set_pxact_gpio</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>calibrate_rcx20</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arch_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SLP_Handler
</UL>

<P><STRONG><a name="[af]"></a>read_rcx_freq</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = read_rcx_freq &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[96]"></a>set_sleep_delay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_sleep_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup_delay_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_init_func
</UL>

<P><STRONG><a name="[4e]"></a>get_rc16m_count_func</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_rc16m_count_func
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$get_rc16m_count_func (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[b7]"></a>conditionally_run_radio_cals</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conditionally_run_radio_cals
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibration (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_vcocal_LUT_InitUpdate (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[f0]"></a>lld_sleep_us_2_lpcycles_rcx_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_us_2_lpcycles_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_sel_func
</UL>

<P><STRONG><a name="[f2]"></a>lld_sleep_lpcycles_2_us_rcx_func</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_sel_func
</UL>

<P><STRONG><a name="[2a]"></a>lld_sleep_us_2_lpcycles_sel_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_sleep_us_2_lpcycles_sel_func &rArr; lld_sleep_us_2_lpcycles_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_func (via Veneer)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_rcx_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[2b]"></a>lld_sleep_lpcycles_2_us_sel_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lld_sleep_lpcycles_2_us_sel_func &rArr; lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_func (via Veneer)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_compensate_func_patched
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[23]"></a>uart_flow_off_func</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, arch_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_flow_off_func
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_on (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[1d2]"></a>calculate_arch_adv_time</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, arch_system.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>iq_trim_from_otp</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rf_580.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = iq_trim_from_otp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[59]"></a>rf_reg_rd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>rf_reg_wr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>rf_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>rf_force_agc_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>rf_txpwr_dbm_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>rf_regs</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, rf_580.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reinit_func
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init_func
</UL>

<P><STRONG><a name="[1f]"></a>rf_init_func</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, rf_580.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_init_func &rArr; rf_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_regs
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibration (via Veneer)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_vcocal_LUT_InitUpdate (via Veneer)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rc16m_count (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[2c]"></a>rf_reinit_func</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, rf_580.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rf_reinit_func &rArr; rf_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_rf_diag_irq (via Veneer)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_regs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[f7]"></a>GPIOn_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[19]"></a>GPIO0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO0_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO1_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO1_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO2_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO3_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO4_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>uart_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[1d3]"></a>uart_receive_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>uart_send_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup_func
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Setting
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_confirm
</UL>

<P><STRONG><a name="[f9]"></a>printf_string</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = printf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect_func
</UL>

<P><STRONG><a name="[fa]"></a>printf_byte</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_word
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hword
</UL>

<P><STRONG><a name="[fb]"></a>print_hword</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[fc]"></a>print_word</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_byte
</UL>

<P><STRONG><a name="[12]"></a>UART_Handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>timer0_init</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[d3]"></a>timer0_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[d4]"></a>timer0_enable_irq</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[1d4]"></a>timer0_disable_irq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>SWTIM_Handler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SWTIM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>timer2_init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer2_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_hw_pause
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_enable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_set_sw_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[db]"></a>adc_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
</UL>

<P><STRONG><a name="[dc]"></a>adc_enable_channel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[1d5]"></a>adc_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>adc_get_sample</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[100]"></a>adc_usDelay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_vbat_sample
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibrate
</UL>

<P><STRONG><a name="[ff]"></a>adc_get_vbat_sample</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_usDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>

<P><STRONG><a name="[d9]"></a>adc_calibrate</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_usDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[e1]"></a>spi_cs_low</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
</UL>

<P><STRONG><a name="[e2]"></a>spi_cs_high</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_cs_high &rArr; GPIO_SetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[de]"></a>spi_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_init &rArr; spi_cs_high &rArr; GPIO_SetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_flash_init
</UL>

<P><STRONG><a name="[106]"></a>spi_set_bitmode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_fill
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_release_from_power_down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_power_down
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>

<P><STRONG><a name="[102]"></a>spi_release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_release &rArr; GPIO_SetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_stop
</UL>

<P><STRONG><a name="[1d6]"></a>spi_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>spi_access</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_access
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
</UL>

<P><STRONG><a name="[103]"></a>spi_transaction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_release_from_power_down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_power_down
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>

<P><STRONG><a name="[e0]"></a>spi_flash_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_flash_init
</UL>

<P><STRONG><a name="[105]"></a>spi_flash_read_status_reg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>

<P><STRONG><a name="[107]"></a>spi_flash_wait_till_ready</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_power_down
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>

<P><STRONG><a name="[108]"></a>spi_read_flash_jedec_id</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_auto_detect
</UL>

<P><STRONG><a name="[df]"></a>spi_flash_auto_detect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_flash_auto_detect &rArr; spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[109]"></a>spi_flash_set_write_enable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
</UL>

<P><STRONG><a name="[10a]"></a>spi_flash_write_enable_volatile</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>

<P><STRONG><a name="[10b]"></a>spi_flash_set_write_disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>

<P><STRONG><a name="[10c]"></a>spi_flash_write_status_reg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
</UL>

<P><STRONG><a name="[a4]"></a>spi_flash_read_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_read_data &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_ext_mem
</UL>

<P><STRONG><a name="[10d]"></a>spi_flash_page_program</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
</UL>

<P><STRONG><a name="[10e]"></a>spi_flash_block_erase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_flash_block_erase &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_erase_flash_sectors
</UL>

<P><STRONG><a name="[10f]"></a>spi_flash_chip_erase</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase_forced
</UL>

<P><STRONG><a name="[1d7]"></a>TO_BE_IMPLEMENTED_spi_flash_check_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_flash.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>spi_read_flash_memory_man_and_dev_id</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_read_flash_memory_man_and_dev_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_flash_init
</UL>

<P><STRONG><a name="[a3]"></a>spi_read_flash_unique_id</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_read_flash_unique_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[111]"></a>spi_flash_write_data</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_image_valid_flag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
</UL>

<P><STRONG><a name="[112]"></a>spi_flash_power_down</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>

<P><STRONG><a name="[113]"></a>spi_flash_release_from_power_down</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>

<P><STRONG><a name="[114]"></a>spi_flash_configure_memory_protection</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase_forced
</UL>

<P><STRONG><a name="[115]"></a>spi_flash_chip_erase_forced</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
</UL>

<P><STRONG><a name="[116]"></a>spi_flash_page_fill</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_fill
</UL>

<P><STRONG><a name="[117]"></a>spi_flash_fill</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>

<P><STRONG><a name="[2f]"></a>ke_task_init_func</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ke_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ke_task_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_callback_set (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[67]"></a>my_llc_con_update_req_ind</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ch_map.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_llc_con_update_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_con_update_ind (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>my_llc_ch_map_req_ind</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ch_map.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_llc_ch_map_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_ch_map_ind (via Veneer)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llc_util_dicon_procedure (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>l2cc_pdu_recv_ind_handler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, atts_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = l2cc_pdu_recv_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_resp (via Veneer)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_no_resp (via Veneer)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_signed_write_resp (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_send_cmd_cmp (via Veneer)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_resp (via Veneer)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_mult_resp (via Veneer)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_type_resp (via Veneer)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_by_grp_type_resp (via Veneer)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_read_blob_resp (via Veneer)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_prepare_write_resp (via Veneer)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_mtu_exc_resp (via Veneer)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_info_resp (via Veneer)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_find_by_type_resp (via Veneer)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_execute_write_resp (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>smpc_send_pairing_req_ind</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, smpc.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smpc_send_pairing_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_enc_keysize (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_cfm_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>smpc_check_pairing_feat</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, smpc.obj(.text))
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>smpc_pairing_cfm_handler</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, smpc_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smpc_pairing_cfm_handler &rArr; smpc_send_pairing_req_ind
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_send_pairing_req_ind
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_send_continue (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_tkdp_rcp_start (via Veneer)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pdu_send (via Veneer)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_pairing_end (via Veneer)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_is_sec_mode_reached (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_get_key_sec_prop (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_generate_rand (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_max_key_size (via Veneer)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpc_check_key_distrib (via Veneer)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_role (via Veneer)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_enc_keysize (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>patched_gapm_adv_op_sanity</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, gapm_util.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = patched_gapm_adv_op_sanity &rArr; gapm_adv_sanity
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_set_recon_addr (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_get_privacy_flag (via Veneer)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_sanity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>custom_nvds_get_func</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = custom_nvds_get_func
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[93]"></a>nvds_read_bdaddr_from_otp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nvds_read_bdaddr_from_otp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[b8]"></a>rwip_sleep</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, rwip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rwip_sleep &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_ble_ext_wakeup_get
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_us_2_lpcycles_sel_func
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_prevent_sleep_get (via Veneer)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_check (via Veneer)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_enter (via Veneer)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_sleep_check (via Veneer)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_sleep_check (via Veneer)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_enter_sleep (via Veneer)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_regs_push (via Veneer)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[28]"></a>lld_sleep_compensate_func_patched</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lld_sleep_compensate_func_patched &rArr; lld_sleep_lpcycles_2_us_sel_func &rArr; lld_sleep_lpcycles_2_us_rcx_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_sleep_lpcycles_2_us_sel_func
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BLE_WAKEUP_LP_Handler &rArr; periph_init &rArr; spi_flash_auto_detect &rArr; spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BLE_CSCNT_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_CSCNT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_start_isr (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$BLE_CSCNT_Handler (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BLE_SLP_Handler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_SLP_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_rcx20
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_wakeup (via Veneer)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_workaround_init (via Veneer)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_reinit (via Veneer)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gtl_eif_init (via Veneer)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_regs_pop (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BLE_RX_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_RX_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_rx_isr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_EVENT_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLE_EVENT_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lld_evt_end_isr (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BLE_RF_DIAG_Handler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rwble.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLE_RF_DIAG_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rf_cal_cap (via Veneer)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gauss_modgain (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[157]"></a>prf_server_error_ind_send</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, prf_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_enable_req_handler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_char_val_req_handler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_enable_req_handler
</UL>

<P><STRONG><a name="[c7]"></a>prf_server_send_event</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, prf_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_server_send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio0_int_callback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_status_update_req_handler
</UL>

<P><STRONG><a name="[1d8]"></a>prf_pack_date_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, prf_utils.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>prf_unpack_date_time</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, prf_utils.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>prf_init_func</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, prf_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prf_init_func &rArr; streamdatad_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;streamdatad_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[34]"></a>prf_cleanup_func</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, prf_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prf_cleanup_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_send_disconect_ind (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio0_int_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jump_table.o(jump_table_mem_area)
</UL>
<P><STRONG><a name="[15a]"></a>streamdatad_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, streamdatad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = streamdatad_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init_func
</UL>

<P><STRONG><a name="[15b]"></a>spotar_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spotar_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init_func
</UL>

<P><STRONG><a name="[168]"></a>spotar_patched_data_rcved</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, spotar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>

<P><STRONG><a name="[167]"></a>spotar_disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spotar_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
</UL>

<P><STRONG><a name="[159]"></a>diss_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = diss_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_init_func
</UL>

<P><STRONG><a name="[169]"></a>diss_compute_cfg_flag</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = diss_compute_cfg_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_create_db_req_handler
</UL>

<P><STRONG><a name="[16a]"></a>diss_check_val_len</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, diss.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_set_char_val_req_handler
</UL>

<P><STRONG><a name="[16b]"></a>diss_disable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, diss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = diss_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
</UL>

<P><STRONG><a name="[b0]"></a>app_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_init &rArr; app_sec_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_create (via Veneer)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get (via Veneer)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[16f]"></a>app_db_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_db_init &rArr; app_db_init_func &rArr; app_stream_create_db
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_func
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_func
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_module_init_cmp_evt_handler
</UL>

<P><STRONG><a name="[171]"></a>app_disconnect</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[9b]"></a>app_timer_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_cleanup_func
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio0_int_callback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_timer_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_func
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_confirm
</UL>

<P><STRONG><a name="[173]"></a>app_connect_confirm</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_connect_confirm &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_byte
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
</UL>

<P><STRONG><a name="[174]"></a>app_adv_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_func
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_func
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect_func
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_complete_func
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func
</UL>

<P><STRONG><a name="[176]"></a>app_adv_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>

<P><STRONG><a name="[177]"></a>app_param_update_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_param_update_func
</UL>

<P><STRONG><a name="[179]"></a>app_connect</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_func
</UL>

<P><STRONG><a name="[17b]"></a>app_sec_gen_tk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_sec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
</UL>

<P><STRONG><a name="[17d]"></a>app_sec_gen_ltk</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app_sec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
</UL>

<P><STRONG><a name="[16e]"></a>app_sec_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_sec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_sec_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init_func
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[17f]"></a>app_security_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, app_sec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>

<P><STRONG><a name="[85]"></a>gapc_bond_req_ind_handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, app_sec_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_bond_req_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_tk_exch_func
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_pairing_rsp_func
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_ltk_exch_func
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_irk_exch_func
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_send_csrk_exch_func
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_mitm_passcode_entry_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>gapc_bond_ind_handler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_sec_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_bond_ind_handler &rArr; app_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_paired_func
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>gapc_encrypt_req_ind_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, app_sec_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gapc_encrypt_req_ind_handler &rArr; app_connect_confirm &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_validate_encrypt_req_func
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_encrypt_complete_func
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_confirm
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>gapc_encrypt_ind_handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_sec_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapc_encrypt_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_encrypt_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>gapm_device_ready_ind_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_device_ready_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>gapm_cmp_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapm_cmp_evt_handler &rArr; app_set_dev_config_complete_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_dev_config_complete_func
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_scanning_completed_func
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_failed_func
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_configuration_func
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_undirect_complete
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_direct_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>gapc_connection_req_ind_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gapc_connection_req_ind_handler &rArr; app_connection_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>gapc_cmp_evt_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gapc_cmp_evt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_update_params_rejected_func
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_update_params_complete_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>gapc_disconnect_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gapc_disconnect_ind_handler &rArr; app_disconnect_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_disconnect_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>app_module_init_cmp_evt_handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_module_init_cmp_evt_handler &rArr; app_db_init_complete_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_complete_func
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>gapm_adv_report_ind_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gapm_adv_report_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_report_ind_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>adc_timer_handle</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = adc_timer_handle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via Veneer)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fliter
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>uart_handle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_handle &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>motor_handle</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_handle &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>motor_reset_handle</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = motor_reset_handle &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_get_sample
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>key_scan_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>key_dispose_handle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>app_init_func</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_init_func
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[17e]"></a>app_sec_init_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_sec_init
</UL>

<P><STRONG><a name="[190]"></a>app_connection_func</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_connection_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_streamdatad_enable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_enable_prf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect_confirm
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_connection_req_ind_handler
</UL>

<P><STRONG><a name="[175]"></a>app_adv_func</STRONG> (Thumb, 332 bytes, Stack size 96 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvds_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start
</UL>

<P><STRONG><a name="[193]"></a>app_disconnect_func</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_disconnect_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_disconnect_ind_handler
</UL>

<P><STRONG><a name="[170]"></a>app_db_init_func</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_db_init_func &rArr; app_stream_create_db
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_stream_create_db
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_create_db
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_dis_create_db_send
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init
</UL>

<P><STRONG><a name="[178]"></a>app_param_update_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_param_update_start
</UL>

<P><STRONG><a name="[18a]"></a>app_configuration_func</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[18b]"></a>app_set_dev_config_complete_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_set_dev_config_complete_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[191]"></a>app_update_params_rejected_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[192]"></a>app_update_params_complete_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_cmp_evt_handler
</UL>

<P><STRONG><a name="[18c]"></a>app_adv_undirect_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[18d]"></a>app_adv_direct_complete</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[194]"></a>app_db_init_complete_func</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = app_db_init_complete_func &rArr; app_adv_start &rArr; app_adv_func &rArr; app_timer_set
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_adv_start
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_module_init_cmp_evt_handler
</UL>

<P><STRONG><a name="[18e]"></a>app_scanning_completed_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[17a]"></a>app_connect_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connect
</UL>

<P><STRONG><a name="[195]"></a>app_adv_report_ind_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_adv_report_ind_handler
</UL>

<P><STRONG><a name="[18f]"></a>app_connect_failed_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapm_cmp_evt_handler
</UL>

<P><STRONG><a name="[180]"></a>app_send_pairing_rsp_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[181]"></a>app_send_tk_exch_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[183]"></a>app_send_irk_exch_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[184]"></a>app_send_csrk_exch_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[185]"></a>app_send_ltk_exch_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[186]"></a>app_paired_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_ind_handler
</UL>

<P><STRONG><a name="[187]"></a>app_validate_encrypt_req_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
</UL>

<P><STRONG><a name="[189]"></a>app_sec_encrypt_ind_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_ind_handler
</UL>

<P><STRONG><a name="[188]"></a>app_sec_encrypt_complete_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_encrypt_req_ind_handler
</UL>

<P><STRONG><a name="[182]"></a>app_mitm_passcode_entry_func</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_bond_req_ind_handler
</UL>

<P><STRONG><a name="[1a1]"></a>app_ext_stats_report_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_throughput_peripheral_proj.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>

<P><STRONG><a name="[91]"></a>my_timer_handler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, app_throughput_peripheral_proj.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = my_timer_handler &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_timer_clear (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>app_stream_create_db</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_streamdatad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_stream_create_db
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_func
</UL>

<P><STRONG><a name="[19c]"></a>app_streamdatad_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_streamdatad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_streamdatad_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func
</UL>

<P><STRONG><a name="[90]"></a>stream_create_db_cfm_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_streamdatad_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stream_create_db_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>spotar_create_db_cfm_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spotar_create_db_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>spotar_patch_data_ind_handler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, app_spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = spotar_patch_data_ind_handler &rArr; app_spotar_img_hdlr &rArr; app_read_image_headers &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>spotar_patch_mem_dev_ind_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = spotar_patch_mem_dev_ind_handler &rArr; app_spotar_read_mem &rArr; app_set_image_valid_flag &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_mem_info_update_req
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>spotar_gpio_map_ind_handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spotar_gpio_map_ind_handler &rArr; spotar_send_status_update_req
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_mem_info_update_req
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_patching_spota_length (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>spotar_patch_len_ind_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spotar_patch_len_ind_handler &rArr; spotar_send_status_update_req
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>app_spotar_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_spotar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_func
</UL>

<P><STRONG><a name="[1a8]"></a>app_spotar_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_spotar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_len_ind_handler
</UL>

<P><STRONG><a name="[1a0]"></a>app_spotar_create_db</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_spotar_create_db
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_func
</UL>

<P><STRONG><a name="[19b]"></a>app_spotar_enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_spotar_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func
</UL>

<P><STRONG><a name="[1a3]"></a>spotar_send_status_update_req</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spotar_send_status_update_req
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_start
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_len_ind_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_data_ind_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_gpio_map_ind_handler
</UL>

<P><STRONG><a name="[1a9]"></a>app_spotar_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_spotar_stop &rArr; spi_release &rArr; GPIO_SetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
</UL>

<P><STRONG><a name="[1aa]"></a>app_set_image_valid_flag</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_set_image_valid_flag &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem
</UL>

<P><STRONG><a name="[1ab]"></a>app_spotar_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_spotar_start &rArr; spotar_send_status_update_req
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_read_mem
</UL>

<P><STRONG><a name="[1a5]"></a>app_spotar_read_mem</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = app_spotar_read_mem &rArr; app_set_image_valid_flag &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_reset (via Veneer)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_start
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_image_valid_flag
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_stop
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_patching_spota_length (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_mem_dev_ind_handler
</UL>

<P><STRONG><a name="[1a6]"></a>spotar_send_mem_info_update_req</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spotar_send_mem_info_update_req
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_mem_dev_ind_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_gpio_map_ind_handler
</UL>

<P><STRONG><a name="[1ad]"></a>app_spi_flash_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = app_spi_flash_init &rArr; spi_read_flash_memory_man_and_dev_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
</UL>

<P><STRONG><a name="[1ae]"></a>app_spotar_spi_config</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_spotar_spi_config &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_pd_hdlr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
</UL>

<P><STRONG><a name="[1a2]"></a>app_spotar_pd_hdlr</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = app_spotar_pd_hdlr &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_spi_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_flash_init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_stop
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_mem_info_update_req
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_patching_spota_length (via Veneer)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_data_ind_handler
</UL>

<P><STRONG><a name="[1b0]"></a>app_erase_flash_sectors</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_erase_flash_sectors &rArr; spi_flash_block_erase &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers
</UL>

<P><STRONG><a name="[1b5]"></a>app_get_image_id</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_spotar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers
</UL>

<P><STRONG><a name="[1b3]"></a>app_find_old_img</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_spotar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers
</UL>

<P><STRONG><a name="[1b1]"></a>app_read_ext_mem</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_read_ext_mem &rArr; spi_flash_read_data &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers
</UL>

<P><STRONG><a name="[1b2]"></a>app_read_image_headers</STRONG> (Thumb, 518 bytes, Stack size 128 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = app_read_image_headers &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via Veneer)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_ext_mem
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_find_old_img
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_get_image_id
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_erase_flash_sectors
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_img_hdlr
</UL>

<P><STRONG><a name="[1a4]"></a>app_spotar_img_hdlr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, app_spotar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = app_spotar_img_hdlr &rArr; app_read_image_headers &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_read_image_headers
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_spi_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_flash_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_status_update_req
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_send_mem_info_update_req
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_patch_data_ind_handler
</UL>

<P><STRONG><a name="[1b6]"></a>app_spotar_exec_patch</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, app_spotar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_patching_spota (via Veneer)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_patching_spota_length (via Veneer)
</UL>

<P><STRONG><a name="[1b8]"></a>app_spotar_i2c_config</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, app_spotar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>diss_create_db_cfm_handler</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, app_dis_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = diss_create_db_cfm_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_get (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>diss_disable_ind_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_dis_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>app_dis_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_dis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init_func
</UL>

<P><STRONG><a name="[19f]"></a>app_dis_create_db_send</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_dis_create_db_send
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_db_init_func
</UL>

<P><STRONG><a name="[19a]"></a>app_dis_enable_prf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_dis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_dis_enable_prf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_connection_func
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[e7]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[1da]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dadd &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue (via Veneer)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round (via Veneer)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[196]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; __aeabi_lasr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[1be]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rwip_sleep
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rcx_freq
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1db]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1bf]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[95]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1dc]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, gpio.o(i.GPIO_ConfigurePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattc_write_cmd_ind_handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_functions
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_i2c_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spotar_spi_config
</UL>

<P><STRONG><a name="[dd]"></a>GPIO_EnableIRQ</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, gpio.o(i.GPIO_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GPIO_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[98]"></a>GPIO_GetPinStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, gpio.o(i.GPIO_GetPinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_GetPinStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[f8]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gpio.o(i.GPIO_ResetIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_SetActive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetActive
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Wake
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_release
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_timer_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_SetInactive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetInactive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Wake
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZigBee_Sleep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBeep
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDispose
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_timer_handler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_reset_handle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_timer_handle
</UL>

<P><STRONG><a name="[1c2]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gpio.o(i.GPIO_SetPinFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, gpio.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO_init &rArr; GPIO_reservations
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl (via Veneer)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_reservations
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[1dd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ce]"></a>set_tmr_div</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.set_tmr_div))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[cd]"></a>set_tmr_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.set_tmr_enable))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[d5]"></a>timer0_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(i.timer0_start))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[fd]"></a>timer2_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.timer2_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[fe]"></a>timer2_set_hw_pause</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_hw_pause))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
</UL>

<P><STRONG><a name="[d1]"></a>timer2_set_pwm2_duty_cycle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_pwm2_duty_cycle))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[d2]"></a>timer2_set_sw_pause</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm.o(i.timer2_set_sw_pause))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, boot_vectors.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> boot_vectors.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>cmp_abs_time</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arch_main.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arch_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[5c]"></a>rf_sleep</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>RADIOCNTL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>rf_rssi_convert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf_580.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rf_580.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>ke_task_schedule</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, ke_task.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ke_task_schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_task_handler_get (via Veneer)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_free (via Veneer)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_event_clear (via Veneer)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_push_back (via Veneer)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;co_list_pop_front (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ke_task.obj(.text)
</UL>
<P><STRONG><a name="[142]"></a>gapm_adv_sanity</STRONG> (Thumb, 170 bytes, Stack size 60 bytes, gapm_util.obj(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gapm_adv_sanity
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patched_gapm_adv_op_sanity
</UL>

<P><STRONG><a name="[6a]"></a>streamdatad_create_db_req_handler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, streamdatad_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = streamdatad_create_db_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streamdatad_task.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>streamdatad_enable_req_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, streamdatad_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = streamdatad_enable_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streamdatad_task.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>streamdatad_disable_req_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, streamdatad_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = streamdatad_disable_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streamdatad_task.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>gattc_write_cmd_ind_handler</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, streamdatad_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gattc_write_cmd_ind_handler &rArr; spi_flash_block_erase &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low &rArr; GPIO_SetInactive
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send (via Veneer)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_update_value (via Veneer)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_string
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> streamdatad_task.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>spotar_create_db_req_handler</STRONG> (Thumb, 508 bytes, Stack size 80 bytes, spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = spotar_create_db_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_service (via Veneer)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_add_attribute (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spotar_task.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>spotar_status_update_req_handler</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spotar_status_update_req_handler &rArr; prf_server_send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_send_event
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_get_value (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spotar_task.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>spotar_mem_info_update_req_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spotar_mem_info_update_req_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spotar_task.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>spotar_enable_req_handler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spotar_enable_req_handler &rArr; prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spotar_task.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>gattc_write_cmd_ind_handler</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gattc_write_cmd_ind_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atts_write_rsp_send (via Veneer)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conhdl (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spotar_task.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>gapc_disconnect_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, spotar_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_disconnect_ind_handler &rArr; spotar_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spotar_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spotar_task.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>diss_create_db_req_handler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = diss_create_db_req_handler &rArr; diss_compute_cfg_flag
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attm_svc_create_db (via Veneer)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_send (via Veneer)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_msg_alloc (via Veneer)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_compute_cfg_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>diss_set_char_val_req_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = diss_set_char_val_req_handler &rArr; prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_att_set_value (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_check_val_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>diss_enable_req_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = diss_enable_req_handler &rArr; prf_server_error_ind_send
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapc_get_conidx (via Veneer)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attmdb_svc_set_permission (via Veneer)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prf_server_error_ind_send
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_state_set (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>gapc_disconnect_ind_handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diss_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gapc_disconnect_ind_handler &rArr; diss_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;diss_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> diss_task.o(.constdata)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
